{"/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/test.js":"/* istanbul instrument in package npmtest_generator_angular_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/lib.npmtest_generator_angular_meteor.js":"/* istanbul instrument in package npmtest_generator_angular_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_angular_meteor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_angular_meteor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-angular-meteor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_angular_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_angular_meteor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_angular_meteor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_angular_meteor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_angular_meteor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_angular_meteor.__dirname + '/lib.npmtest_generator_angular_meteor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/util.js":"(function() {\r\n  var _, fs, glob, path, spawn, spawnSync, write;\r\n\r\n  spawnSync = function(command, args, cb) {\r\n    var poll, result;\r\n    result = spawn(command, args, {\r\n      stdio: 'inherit'\r\n    });\r\n    poll = function() {\r\n      if (result._closesGot === 1) {\r\n        if (typeof cb === \"function\") {\r\n          cb();\r\n        }\r\n      } else {\r\n        setTimeout(poll, 500);\r\n      }\r\n    };\r\n    poll();\r\n  };\r\n\r\n  write = function(self, options, cb) {\r\n    var files;\r\n    if (!self.filters.jade) {\r\n      self.filters.jade = false;\r\n    }\r\n    files = glob('**', {\r\n      dot: true,\r\n      cwd: self.sourceRoot()\r\n    }, (function(err, files) {\r\n      var dest, src;\r\n      src = void 0;\r\n      dest = void 0;\r\n      files.forEach((function(f) {\r\n        var filter, newname;\r\n        if (f.search(/\\.(js|coffee|html|jade|css|scss|less|styl)$/) > -1 || f.indexOf('_') === 0) {\r\n          for (filter in self.filters) {\r\n            if (self.filters[filter]) {\r\n              if (f.indexOf('(' + filter + ')') !== -1 || f.indexOf('(') === -1) {\r\n                newname = f.replace('(' + filter + ')', '');\r\n                try {\r\n                  self.fs.copyTpl(self.templatePath(f), self.destinationPath(newname.replace(/^_/, '').replace('compname-singular', options.compnameSluggedSingular || options.compnameSingular).replace('compname', options.compnameSlugged || self.compname)), options);\r\n                } catch (_error) {\r\n                  err = _error;\r\n                  console.log(err, options);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        } else if (f.search(/\\.(ico)$/) > -1) {\r\n          self.copy(self.templatePath(f), self.destinationPath(f));\r\n        }\r\n      }).bind(self));\r\n      if (cb) {\r\n        cb();\r\n      }\r\n    }).bind(self));\r\n  };\r\n\r\n  'use strict';\r\n\r\n  path = require('path');\r\n\r\n  fs = require('fs');\r\n\r\n  spawn = require('cross-spawn');\r\n\r\n  glob = require('glob');\r\n\r\n  _ = require('lodash');\r\n\r\n  module.exports = {\r\n    spawnSync: spawnSync,\r\n    write: write\r\n  };\r\n\r\n}).call(this);\r\n","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/app/index.js":"(function() {\r\n  var _, _i, angularModules, fs, genUtils, is1point3, meteorToAdd, meteorToRemove, os, path, yeoman;\r\n\r\n  yeoman = require('yeoman-generator');\r\n\r\n  fs = require('fs');\r\n\r\n  path = require('path');\r\n\r\n  _ = require('underscore.string');\r\n\r\n  _i = require('underscore.inflection');\r\n\r\n  os = require('os');\r\n\r\n  genUtils = require('../util.js');\r\n\r\n  meteorToAdd = ['add', 'angular', 'angularui:angular-ui-router'];\r\n\r\n  meteorToRemove = ['remove', 'blaze-html-templates', 'ecmascript'];\r\n\r\n  angularModules = ['angular-meteor', 'ui.router'];\r\n\r\n  is1point3 = false;\r\n\r\n  module.exports = yeoman.generators.Base.extend({\r\n    init: function() {\r\n      this.argument('name', {\r\n        type: String,\r\n        required: true\r\n      });\r\n      this.argument('dontrun', {\r\n        type: String,\r\n        required: false\r\n      });\r\n      this.appname = this.name || path.basename(process.cwd());\r\n      this.appname = _.camelize(_.slugify(_.humanize(this.appname)));\r\n    },\r\n    info: function() {},\r\n    checkForConfig: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      if (this.config.get('filters')) {\r\n        this.log('The generator has already been run');\r\n        return;\r\n      }\r\n      if (fs.existsSync(process.cwd() + '/' + this.appname)) {\r\n        this.log('The generator has already been run.  CD into the directory');\r\n        return;\r\n      }\r\n      cb();\r\n    },\r\n    windowsXCheck: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      if (os.platform().indexOf('win') !== -1 && os.release().indexOf('10') === 0) {\r\n        this.prompt([\r\n          {\r\n            type: 'input',\r\n            name: 'hmmmm',\r\n            message: 'Hit Enter to get started'\r\n          }\r\n        ], (function() {\r\n          cb();\r\n        }).bind(this));\r\n      } else {\r\n        cb();\r\n      }\r\n    },\r\n    clientPrompts: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      this.prompt([\r\n        {\r\n          type: 'list',\r\n          name: 'script',\r\n          message: 'What would you like to write scripts with?',\r\n          choices: ['JavaScript', 'CoffeeScript'],\r\n          \"default\": 1,\r\n          filter: function(val) {\r\n            var filterMap;\r\n            filterMap = {\r\n              'JavaScript': 'js',\r\n              'CoffeeScript': 'coffee'\r\n            };\r\n            return filterMap[val];\r\n          }\r\n        }, {\r\n          type: 'list',\r\n          name: 'markup',\r\n          message: 'What would you like to write markup with?',\r\n          \"default\": 1,\r\n          choices: ['HTML', 'Jade'],\r\n          filter: function(val) {\r\n            return val.toLowerCase();\r\n          }\r\n        }, {\r\n          type: 'list',\r\n          name: 'stylesheet',\r\n          \"default\": 1,\r\n          message: 'What would you like to write stylesheets with?',\r\n          choices: ['CSS', 'Stylus', 'Less', 'SCSS'],\r\n          filter: function(val) {\r\n            return val.toLowerCase();\r\n          }\r\n        }, {\r\n          type: 'confirm',\r\n          name: 'pagination',\r\n          message: 'Would you like pagination, sorting and searching support?'\r\n        }, {\r\n          type: 'list',\r\n          name: 'framework',\r\n          message: 'Select a CSS framework',\r\n          \"default\": 1,\r\n          choices: ['None', 'Bootstrap', 'Angular Material', 'Ionic'],\r\n          filter: function(val) {\r\n            var filterMap;\r\n            filterMap = {\r\n              'None': 'none',\r\n              'Angular Material': 'material',\r\n              'Bootstrap': 'bootstrap',\r\n              'PureCSS': 'purecss',\r\n              'Foundation for Apps': 'foundationapps',\r\n              'Ionic': 'ionic'\r\n            };\r\n            return filterMap[val];\r\n          }\r\n        }\r\n      ], (function(answers) {\r\n        this.filters = {};\r\n        this.filters[answers.script] = true;\r\n        this.filters[answers.markup] = true;\r\n        this.filters[answers.stylesheet] = true;\r\n        this.filters.pagination = !!answers.pagination;\r\n        this.filters.framework = answers.framework;\r\n        cb();\r\n      }).bind(this));\r\n    },\r\n    authPrompts: function() {\r\n      var cb, self;\r\n      cb = this.async();\r\n      self = this;\r\n      this.prompt([\r\n        {\r\n          type: 'confirm',\r\n          name: 'auth',\r\n          message: 'Would you like to use user authentication?'\r\n        }, {\r\n          type: 'checkbox',\r\n          name: 'oauth',\r\n          message: 'Would you like to include additional oAuth strategies?',\r\n          when: function(answers) {\r\n            return answers.auth;\r\n          },\r\n          choices: [\r\n            {\r\n              value: 'googleAuth',\r\n              name: 'Google',\r\n              checked: false\r\n            }, {\r\n              value: 'facebookAuth',\r\n              name: 'Facebook',\r\n              checked: false\r\n            }, {\r\n              value: 'twitterAuth',\r\n              name: 'Twitter',\r\n              checked: false\r\n            }\r\n          ]\r\n        }\r\n      ], (function(answers) {\r\n        this.filters.auth = !!answers.auth;\r\n        if (answers.oauth) {\r\n          if (answers.oauth.length) {\r\n            this.filters.oauth = true;\r\n          }\r\n          answers.oauth.forEach((function(oauthStrategy) {\r\n            this.filters[oauthStrategy] = true;\r\n          }).bind(this));\r\n        }\r\n        cb();\r\n      }).bind(this));\r\n    },\r\n    createMeteorProject: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      genUtils.spawnSync('meteor', ['create', this.appname], cb);\r\n    },\r\n    changeDirectory: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      if (!fs.existsSync(process.cwd() + '/' + this.appname)) {\r\n        this.log('Something went wrong running meteor, please make sure you have it installed properly.  https://www.meteor.com/');\r\n        return;\r\n      }\r\n      process.chdir(process.cwd() + '/' + this.appname);\r\n      this.destinationRoot(process.cwd());\r\n      this.config.set('filters', this.filters);\r\n      this.config.set('appname', this.appname);\r\n      cb();\r\n    },\r\n    cleanMeteorDirectory: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      ['.html', '.css', '.js'].forEach((function(ext) {\r\n        try {\r\n          fs.unlinkSync(process.cwd() + '/' + this.appname + ext);\r\n        } catch (_error) {}\r\n      }).bind(this));\r\n      ['client/main.html', 'client/main.css', 'client/main.js', 'server/main.js'].forEach((function(fileName) {\r\n        try {\r\n          fs.unlinkSync(process.cwd() + '/' + fileName);\r\n          is1point3 = true;\r\n        } catch (_error) {}\r\n      }).bind(this));\r\n      cb();\r\n    },\r\n    removeMeteorPackages: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      if (this.filters.auth) {\r\n        meteorToRemove.push('insecure');\r\n      }\r\n      if (this.filters.pagination) {\r\n        meteorToRemove.push('autopublish');\r\n      }\r\n      if (meteorToRemove.length > 1) {\r\n        genUtils.spawnSync('meteor', meteorToRemove, cb);\r\n      } else {\r\n        cb();\r\n      }\r\n    },\r\n    loadMeteorPackages: function() {\r\n      var cb;\r\n      cb = this.async();\r\n      if (this.filters.coffee) {\r\n        meteorToAdd.push('ndxbxrme:ng-coffeescript');\r\n      }\r\n      if (this.filters.stylus) {\r\n        meteorToAdd.push('mquandalle:stylus');\r\n      }\r\n      if (this.filters.less) {\r\n        meteorToAdd.push('flemay:less-autoprefixer');\r\n      }\r\n      if (this.filters.scss) {\r\n        meteorToAdd.push('fourseven:scss');\r\n      }\r\n      if (this.filters.jade) {\r\n        meteorToAdd.push('civilframe:angular-jade');\r\n      }\r\n      if (this.filters.framework === 'material') {\r\n        meteorToAdd.push('angular:angular-material');\r\n        angularModules.push('ngMaterial');\r\n      }\r\n      if (this.filters.framework === 'bootstrap') {\r\n        meteorToAdd.push('twbs:bootstrap');\r\n        meteorToAdd.push('angularui:angular-ui-bootstrap');\r\n        angularModules.push('ui.bootstrap');\r\n      }\r\n      if (this.filters.framework === 'purecss') {\r\n        meteorToAdd.push('mrt:purecss');\r\n      }\r\n      if (this.filters.framework === 'foundationapps') {\r\n        meteorToAdd.push('rainhaven:foundation-apps');\r\n      }\r\n      if (this.filters.framework === 'ionic') {\r\n        meteorToAdd.splice(meteorToAdd.indexOf('angularui:angular-ui-router'), 1);\r\n        meteorToAdd.push('driftyco:ionic');\r\n        angularModules.splice(angularModules.indexOf('ui-router'), 1);\r\n        angularModules.push('ionic');\r\n      }\r\n      if (this.filters.bower) {\r\n        meteorToAdd.push('mquandalle:bower');\r\n      }\r\n      if (this.filters.pagination) {\r\n        meteorToAdd.push('tmeasday:publish-counts');\r\n        meteorToAdd.push('angularutils:pagination');\r\n        angularModules.push('angularUtils.directives.dirPagination');\r\n      }\r\n      if (this.filters.auth) {\r\n        meteorToAdd.push('accounts-password');\r\n        meteorToAdd.push('dotansimha:accounts-ui-angular');\r\n        angularModules.push('accounts.ui');\r\n      }\r\n      if (this.filters.twitterAuth) {\r\n        meteorToAdd.push('accounts-twitter');\r\n      }\r\n      if (this.filters.facebookAuth) {\r\n        meteorToAdd.push('accounts-facebook');\r\n      }\r\n      if (this.filters.googleAuth) {\r\n        meteorToAdd.push('accounts-google');\r\n      }\r\n      genUtils.spawnSync('meteor', meteorToAdd, cb);\r\n    },\r\n    updateMeteorPackages: function() {\r\n      var cb, meteorToUpdate;\r\n      if (is1point3) {\r\n        cb = this.async();\r\n        meteorToUpdate = meteorToAdd;\r\n        meteorToUpdate[0] = 'update';\r\n        meteorToUpdate.push('angular:angular');\r\n        meteorToUpdate.push('dburles:mongo-collection-instances');\r\n        meteorToUpdate.push('lai:collection-extensions');\r\n        meteorToUpdate.push('pbastowski:angular-babel');\r\n        if (this.filters.auth) {\r\n          meteorToUpdate.push('dotansimha:accounts-ui-angular');\r\n          meteorToUpdate.push('tmeasday:check-npm-versions');\r\n        }\r\n        genUtils.spawnSync('meteor', meteorToUpdate, cb);\r\n      }\r\n    },\r\n    write: function() {\r\n      this.filters.appname = this.appname + 'App';\r\n      this.filters.projectname = this.config.get('appname');\r\n      this.filters.modules = '\\'' + (this.filters.js ? angularModules.join('\\',\\n  \\'') : angularModules.join('\\'\\n  \\'')) + '\\'';\r\n      this.filters.usedBower = this.filters.bower === true;\r\n      this.filters.bower = false;\r\n      this.config.set('filters', this.filters);\r\n      this.sourceRoot(path.join(__dirname, './templates/' + this.filters.framework));\r\n      genUtils.write(this, this.filters);\r\n    },\r\n    launchMeteor: function() {\r\n      if (!this.dontrun) {\r\n        this.spawnCommand('meteor', null, null);\r\n      }\r\n    }\r\n  });\r\n\r\n}).call(this);\r\n","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/controller/templates/compname.controller(js).ng.js":"'use strict'\r\n\r\nangular.module('<%= appname %>')\r\n.controller('<%= compnameCapped%>Ctrl', function($scope) {\r\n  $scope.thing = 'i\\'m a thing';\r\n});","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/decorator/templates/compname.decorator(js).ng.js":"'use strict';\r\n\r\nangular.module('<%= appname %>')\r\n  .config(function ($provide) {\r\n    $provide.decorator('<%= compname %>', function ($delegate) {\r\n      // decorate the $delegate\r\n      return $delegate;\r\n    });\r\n  });","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/factory/templates/compname.service(js).ng.js":"'use strict';\r\n\r\nangular.module('<%= appname %>')\r\n.factory('<%= compname %>', function() {\r\n  \r\n  // Private API\r\n  var meaningOfLife = 42\r\n  \r\n  // Public API\r\n  return {\r\n    someMethod: function() {\r\n      return meaningOfLife;\r\n    }\r\n  };\r\n});","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/filter/templates/compname.filter(js).ng.js":"'use strict';\r\n\r\nangular.module('<%= appname %>')\r\n.filter('<%= compname %>', function() {\r\n  return function(input) {\r\n    return '<%= compname %> filter: ' + input;\r\n  };\r\n});","/home/travis/build/npmtest/node-npmtest-generator-angular-meteor/node_modules/generator-angular-meteor/generators/method/templates/compname.method(js).js":"'use strict';\r\n\r\nMeteor.methods({\r\n  <%= compname %>: function() {\r\n    //return a value\r\n    return 23 * 7;\r\n  }\r\n});"}